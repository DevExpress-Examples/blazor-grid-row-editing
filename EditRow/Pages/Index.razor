@page "/"
@implements IDisposable
@using AutoMapper
@using EditRow.Components

@inject IDbContextFactory<NorthwindContext> NorthwindContextFactory

@if(IsLoading) {    <text>Loading...</text>
}else {
    <DxGrid Data="Products"
            EditMode="GridEditMode.EditRow"
            CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
            CustomizeEditModel="Grid_CustomizeEditModel"
            EditModelSaving="Grid_EditModelSaving"
            >
        <Columns>
            <DxGridCommandColumn DeleteButtonVisible="false" VisibleIndex="0" />
            <DxGridDataColumn FieldName="ProductName" VisibleIndex="1" />
            <DxGridDataColumn FieldName="QuantityPerUnit" VisibleIndex="5" />
            <DxGridDataColumn FieldName="UnitsInStock" VisibleIndex="4" />
            <DxGridDataColumn FieldName="Discontinued" VisibleIndex="6">
                <CellDisplayTemplate>
                    <DxCheckBox CssClass="d-inline-block" Enabled="false" Checked="(bool)context.Value" />
                </CellDisplayTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="UnitPrice" DisplayFormat="c" VisibleIndex="3">
                <CellEditTemplate>
                    <GridEditorValidationMessage EditTemplateContext="context">
                        <GridCurrencyEditor EditTemplateContext="context" />
                    </GridEditorValidationMessage>
                </CellEditTemplate>
            </DxGridDataColumn>
            <DxGridDataColumn FieldName="CategoryId" Caption="Category Name" TextAlignment="GridTextAlignment.Left" VisibleIndex="2">
                <CellEditTemplate>
                    <GridEditorValidationMessage EditTemplateContext="context">
                        @{
                            var product = (EditableProduct)context.EditModel;
                        }
                        <DxComboBox Data="Categories"
                                    @bind-Value="product.CategoryId"
                                    ValueFieldName="CategoryId"
                                    TextFieldName="CategoryName"
                                    FilteringMode="DataGridFilteringMode.Contains"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    CssClass="w-100"
                                    />
                    </GridEditorValidationMessage>
                </CellEditTemplate>
            </DxGridDataColumn>
        </Columns>
        <DataColumnCellEditTemplate>
            @{
                var product = (EditableProduct)context.EditModel;
            }
            <GridEditorValidationMessage EditTemplateContext="context">
                @switch(context.DataColumn.FieldName) {
                    case "ProductName":
                        <DxTextBox @bind-Text="@product.ProductName" CssClass="w-100" />
                        break;
                    case "QuantityPerUnit":
                        <DxTextBox @bind-Text="@product.QuantityPerUnit" CssClass="w-100" />
                        break;
                    case "UnitsInStock":
                        <DxSpinEdit @bind-Value="@product.UnitsInStock" CssClass="w-100" />
                        break;
                    case "Discontinued":
                        <DxCheckBox @bind-Checked="@product.Discontinued" CssClass="w-100" />
                        break;
                    default:
                        throw new NotImplementedException();
                }
            </GridEditorValidationMessage>
        </DataColumnCellEditTemplate>
    </DxGrid>
}

@code {
    NorthwindContext Northwind { get; set; }
    List<Product> Products { get; set; }
    List<Category> Categories { get; set; }
    Dictionary<int, string> CategoryNamesIndex { get; set; }

    IMapper ProductMapper { get; set; }
    bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        var config = new MapperConfiguration(c => c.CreateMap<Product, EditableProduct>().ReverseMap());
        ProductMapper = config.CreateMapper();

        Northwind = NorthwindContextFactory.CreateDbContext();
        Products = await Northwind.Products.ToListAsync();
        Categories = await Northwind.Categories.ToListAsync();
        CategoryNamesIndex = Categories.ToDictionary(i => i.CategoryId, i => i.CategoryName);

        IsLoading = false;
    }

    void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e) {
        string displayText;
        var categoryID = Convert.ToInt32(e.GetRowValue("CategoryId"));
        if(e.FieldName == "CategoryId" && CategoryNamesIndex.TryGetValue(categoryID, out displayText))
            e.DisplayText = displayText;
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e) {
        var editableProduct = new EditableProduct();
        if(!e.IsNew)
            ProductMapper.Map<Product, EditableProduct>((Product)e.DataItem, editableProduct);
        e.EditModel = editableProduct;
    }

    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
        var editableProduct = (EditableProduct)e.EditModel;
        var product = e.IsNew
            ? new Product()
            : Northwind.Products.Find(e.Grid.GetDataItemValue(e.DataItem, "ProductId"));
        ProductMapper.Map<EditableProduct, Product>(editableProduct, product);

        if(e.IsNew)
            await Northwind.Products.AddAsync(product);
        await Northwind.SaveChangesAsync();

        Products = await Northwind.Products.ToListAsync();
    }

    public void Dispose() {
        Northwind?.Dispose();
    }
}